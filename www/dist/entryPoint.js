System.register(["./bootstrapper"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var bootstrapper_1, rootElement, loaderHideId;
    return {
        setters: [
            function (bootstrapper_1_1) {
                bootstrapper_1 = bootstrapper_1_1;
            }
        ],
        execute: function () {
            if (window.unite.pwa && "serviceWorker" in navigator) {
                navigator.serviceWorker.register("./service-worker.js")
                    .then(function (registration) {
                    if (!window.unite.bundle) {
                        // tslint:disable-next-line:no-console
                        console.log("ServiceWorker registration successful with scope: ", registration.scope);
                    }
                    return registration;
                }, function (err) {
                    if (!window.unite.bundle) {
                        // tslint:disable-next-line:no-console
                        console.error("ServiceWorker registration failed: ", err);
                    }
                })
                    .catch(function (err) {
                    if (!window.unite.bundle) {
                        // tslint:disable-next-line:no-console
                        console.error(err);
                    }
                });
            }
            rootElement = document.getElementById("root");
            loaderHideId = setInterval(function () {
                if ((rootElement.innerText && rootElement.innerText.length > 0) ||
                    (rootElement.children && rootElement.children.length > 0)) {
                    clearInterval(loaderHideId);
                    var loaderElement = document.getElementById("app-loader");
                    if (loaderElement) {
                        loaderElement.parentNode.removeChild(loaderElement);
                    }
                }
            }, 10);
            if (window.cordova) {
                document.addEventListener("deviceready", function () {
                    bootstrapper_1.bootstrap();
                });
            }
            else {
                bootstrapper_1.bootstrap();
            }
            // Generated by UniteJS
        }
    };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vc3JjL2VudHJ5UG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7WUFNQSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxlQUFlLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDbkQsU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7cUJBQ2xELElBQUksQ0FDRCxVQUFDLFlBQVk7b0JBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLHNDQUFzQzt3QkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvREFBb0QsRUFBRSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzFGLENBQUM7b0JBQ0QsTUFBTSxDQUFDLFlBQVksQ0FBQztnQkFDeEIsQ0FBQyxFQUNELFVBQUMsR0FBRztvQkFDQSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDdkIsc0NBQXNDO3dCQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUM5RCxDQUFDO2dCQUNMLENBQUMsQ0FBQztxQkFDTCxLQUFLLENBQUMsVUFBQyxHQUFHO29CQUNQLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUN2QixzQ0FBc0M7d0JBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3ZCLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDWCxDQUFDO1lBRUssV0FBVyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsWUFBWSxHQUFHLFdBQVcsQ0FDNUI7Z0JBQ0ksRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztvQkFDM0QsQ0FBQyxXQUFXLENBQUMsUUFBUSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUQsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUM1QixJQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUM1RCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO3dCQUNoQixhQUFhLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFDeEQsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQyxFQUNELEVBQUUsQ0FBQyxDQUFDO1lBRVIsRUFBRSxDQUFDLENBQUUsTUFBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUU7b0JBQ3JDLHdCQUFTLEVBQUUsQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osd0JBQVMsRUFBRSxDQUFDO1lBQ2hCLENBQUM7WUFFRCx1QkFBdUI7UUFDdkIsQ0FBQyIsImZpbGUiOiJlbnRyeVBvaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnRyeSBwb2ludCBmb3IgYXBwLlxuICovXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cInVuaXRlanMtdHlwZXNcIiAvPlxuaW1wb3J0IHsgYm9vdHN0cmFwIH0gZnJvbSBcIi4vYm9vdHN0cmFwcGVyXCI7XG5cbmlmICh3aW5kb3cudW5pdGUucHdhICYmIFwic2VydmljZVdvcmtlclwiIGluIG5hdmlnYXRvcikge1xuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKFwiLi9zZXJ2aWNlLXdvcmtlci5qc1wiKVxuICAgICAgICAudGhlbihcbiAgICAgICAgICAgIChyZWdpc3RyYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpbmRvdy51bml0ZS5idW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlV29ya2VyIHJlZ2lzdHJhdGlvbiBzdWNjZXNzZnVsIHdpdGggc2NvcGU6IFwiLCByZWdpc3RyYXRpb24uc2NvcGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnaXN0cmF0aW9uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXdpbmRvdy51bml0ZS5idW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlNlcnZpY2VXb3JrZXIgcmVnaXN0cmF0aW9uIGZhaWxlZDogXCIsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmICghd2luZG93LnVuaXRlLmJ1bmRsZSkge1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cblxuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIik7XG5jb25zdCBsb2FkZXJIaWRlSWQgPSBzZXRJbnRlcnZhbChcbiAgICAoKSA9PiB7XG4gICAgICAgIGlmICgocm9vdEVsZW1lbnQuaW5uZXJUZXh0ICYmIHJvb3RFbGVtZW50LmlubmVyVGV4dC5sZW5ndGggPiAwKSB8fFxuICAgICAgICAgICAgKHJvb3RFbGVtZW50LmNoaWxkcmVuICYmIHJvb3RFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGxvYWRlckhpZGVJZCk7XG4gICAgICAgICAgICBjb25zdCBsb2FkZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHAtbG9hZGVyXCIpO1xuICAgICAgICAgICAgaWYgKGxvYWRlckVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBsb2FkZXJFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobG9hZGVyRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIDEwKTtcblxuaWYgKCh3aW5kb3cgYXMgYW55KS5jb3Jkb3ZhKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRldmljZXJlYWR5XCIsICgpID0+IHtcbiAgICAgICAgYm9vdHN0cmFwKCk7XG4gICAgfSk7XG59IGVsc2Uge1xuICAgIGJvb3RzdHJhcCgpO1xufVxuXG4vLyBHZW5lcmF0ZWQgYnkgVW5pdGVKU1xuIl0sInNvdXJjZVJvb3QiOiIifQ==
